// const { Telegraf, Markup } = require("telegraf");
// const axios = require("axios");
// require("dotenv").config();

// const bot = new Telegraf(process.env.BOT_TOKEN);
// const API_BASE_URL = "https://moki-bd.onrender.com";

// let selectedLevel = null;

// bot.use((ctx, next) => {
//   console.log("üì© Update:", ctx.update);
//   return next();
// });

// const levelKeyboard = Markup.keyboard([
//   ["üá™üá∏ –£—Ä–æ–≤–µ–Ω—å A1", "üá™üá∏ –£—Ä–æ–≤–µ–Ω—å A2"],
//   ["üá™üá∏ –£—Ä–æ–≤–µ–Ω—å B1", "üá™üá∏ –£—Ä–æ–≤–µ–Ω—å B2"],
// ]).resize();

// const mainMenuKeyboard = Markup.keyboard([
//   ["üè∞ –°–∫–∞–∑–∫–∏", "üìò –†–∞—Å—Å–∫–∞–∑—ã"],
//   ["‚è≥ –í—Ä–µ–º–µ–Ω–∞", "‚ù§Ô∏è –ò–∑–±—Ä–∞–Ω–Ω–æ–µ"],
//   ["üôè –ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å", "‚¨ÖÔ∏è –ù–∞–∑–∞–¥"],
// ]).resize();

// bot.start((ctx) => {
//   selectedLevel = null;
//   ctx.reply(
//     `üëã –ü—Ä–∏–≤–µ—Ç, ${ctx.from.first_name || "–¥—Ä—É–≥"}!\n\n` +
//       `–Ø ‚Äî –±–æ—Ç *Moki* –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è –∏—Å–ø–∞–Ω—Å–∫–æ–≥–æ —á–µ—Ä–µ–∑ —Å–∫–∞–∑–∫–∏ –∏ —Ä–∞—Å—Å–∫–∞–∑—ã.\n` +
//       `üìñ –ß–∏—Ç–∞–π –∏ —Å–ª—É—à–∞–π –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ —É—Ä–æ–≤–Ω—è–º A1‚ÄìB2.\n\n` +
//       `üíñ –ü–æ–¥–¥–µ—Ä–∂–∏ –ø—Ä–æ–µ–∫—Ç –∫–æ–º–∞–Ω–¥–æ–π /donate\n\n` +
//       `–í—ã–±–µ—Ä–∏ —Å–≤–æ–π —É—Ä–æ–≤–µ–Ω—å üëá`,
//     {
//       parse_mode: "Markdown",
//       ...levelKeyboard,
//     }
//   );
// });

// bot.hears(/–£—Ä–æ–≤–µ–Ω—å (A1|A2|B1|B2)/, (ctx) => {
//   selectedLevel = ctx.match[1].toUpperCase(); // ‚úÖ –¢–µ–ø–µ—Ä—å –≤—Å–µ–≥–¥–∞ A1, A2 –∏ —Ç.–¥.
//   ctx.reply(
//     `‚úÖ –£—Ä–æ–≤–µ–Ω—å ${ctx.match[1]} –≤—ã–±—Ä–∞–Ω. –û—Ç–∫—Ä—ã–≤–∞—é –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é‚Ä¶`,
//     mainMenuKeyboard
//   );
// });

// bot.hears("üè∞ –°–∫–∞–∑–∫–∏", async (ctx) => {
//   if (!selectedLevel) {
//     return ctx.reply("‚ùó –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ —É—Ä–æ–≤–µ–Ω—å", levelKeyboard);
//   }

//   try {
//     const res = await axios.get(`${API_BASE_URL}/fairy-tales`);
//     const tales = res.data.filter(
//       (tale) => tale.level.toUpperCase() === selectedLevel // ‚úÖ –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –≤ –≤–µ—Ä—Ö–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ
//     );

//     if (tales.length === 0) {
//       return ctx.reply("üì≠ –ü–æ–∫–∞ –Ω–µ—Ç —Å–∫–∞–∑–æ–∫ –¥–ª—è —ç—Ç–æ–≥–æ —É—Ä–æ–≤–Ω—è.");
//     }

//     for (const tale of tales) {
//       await ctx.replyWithAudio(tale.audio_url, {
//         caption: `üìñ ${tale.title}\n\n${tale.text}`,
//       });
//     }
//   } catch (err) {
//     console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–∫–∞–∑–æ–∫:", err.message);
//     ctx.reply("üö´ –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–∫–∞–∑–∫–∏. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.");
//   }
// });

// bot.hears("üìò –†–∞—Å—Å–∫–∞–∑—ã", (ctx) => ctx.reply("üìñ –°–ø–∏—Å–æ–∫ —Ä–∞—Å—Å–∫–∞–∑–æ–≤‚Ä¶"));
// bot.hears("‚è≥ –í—Ä–µ–º–µ–Ω–∞", (ctx) => ctx.reply("‚è≥ –í—Ä–µ–º–µ–Ω–∞ –∏—Å–ø–∞–Ω—Å–∫–æ–≥–æ —è–∑—ã–∫–∞‚Ä¶"));
// bot.hears("‚ù§Ô∏è –ò–∑–±—Ä–∞–Ω–Ω–æ–µ", (ctx) => ctx.reply("‚ù§Ô∏è –¢–≤–æ–∏ –∏–∑–±—Ä–∞–Ω–Ω—ã–µ –∏—Å—Ç–æ—Ä–∏–∏‚Ä¶"));
// bot.hears("üôè –ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å", (ctx) => {
//   ctx.reply(`üôè –ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å –ø—Ä–æ–µ–∫—Ç\nüëâ https://boosty.to/yourpage`);
// });
// bot.hears("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", (ctx) =>
//   ctx.reply("‚Ü©Ô∏è –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", mainMenuKeyboard)
// );

// module.exports = bot;

const { Telegraf, Markup } = require("telegraf");
const axios = require("axios");
require("dotenv").config();

const bot = new Telegraf(process.env.BOT_TOKEN);
const API_BASE_URL = "https://moki-bd.onrender.com";

let selectedLevel = null;

bot.use((ctx, next) => {
  console.log("üì© Update:", ctx.update);
  return next();
});

const levelKeyboard = Markup.keyboard([
  ["üá™üá∏ –£—Ä–æ–≤–µ–Ω—å A1", "üá™üá∏ –£—Ä–æ–≤–µ–Ω—å A2"],
  ["üá™üá∏ –£—Ä–æ–≤–µ–Ω—å B1", "üá™üá∏ –£—Ä–æ–≤–µ–Ω—å B2"],
]).resize();

const mainMenuKeyboard = Markup.keyboard([
  ["üè∞ –°–∫–∞–∑–∫–∏", "üìò –†–∞—Å—Å–∫–∞–∑—ã"],
  ["‚è≥ –í—Ä–µ–º–µ–Ω–∞", "‚ù§Ô∏è –ò–∑–±—Ä–∞–Ω–Ω–æ–µ"],
  ["üôè –ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å", "‚¨ÖÔ∏è –ù–∞–∑–∞–¥"],
]).resize();

bot.start((ctx) => {
  selectedLevel = null;
  ctx.reply(
    `üëã –ü—Ä–∏–≤–µ—Ç, ${ctx.from.first_name || "–¥—Ä—É–≥"}!\n\n` +
      `–Ø ‚Äî –±–æ—Ç *Moki* –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è –∏—Å–ø–∞–Ω—Å–∫–æ–≥–æ —á–µ—Ä–µ–∑ —Å–∫–∞–∑–∫–∏ –∏ —Ä–∞—Å—Å–∫–∞–∑—ã.\n` +
      `üìñ –ß–∏—Ç–∞–π –∏ —Å–ª—É—à–∞–π –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ —É—Ä–æ–≤–Ω—è–º A1‚ÄìB2.\n\n` +
      `üíñ –ü–æ–¥–¥–µ—Ä–∂–∏ –ø—Ä–æ–µ–∫—Ç –∫–æ–º–∞–Ω–¥–æ–π /donate\n\n` +
      `–í—ã–±–µ—Ä–∏ —Å–≤–æ–π —É—Ä–æ–≤–µ–Ω—å üëá`,
    {
      parse_mode: "Markdown",
      ...levelKeyboard,
    }
  );
});

bot.hears(/–£—Ä–æ–≤–µ–Ω—å (A1|A2|B1|B2)/, (ctx) => {
  selectedLevel = ctx.match[1].toLowerCase();
  ctx.reply(
    `‚úÖ –£—Ä–æ–≤–µ–Ω—å ${ctx.match[1]} –≤—ã–±—Ä–∞–Ω. –û—Ç–∫—Ä—ã–≤–∞—é –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é‚Ä¶`,
    mainMenuKeyboard
  );
});

bot.hears("üè∞ –°–∫–∞–∑–∫–∏", async (ctx) => {
  if (!selectedLevel) {
    return ctx.reply("‚ùó –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ —É—Ä–æ–≤–µ–Ω—å", levelKeyboard);
  }

  try {
    const res = await axios.get(`${API_BASE_URL}/fairy-tales`);
    const tales = res.data;

    if (tales.length === 0) {
      return ctx.reply("üì≠ –ü–æ–∫–∞ –Ω–µ—Ç —Å–∫–∞–∑–æ–∫.");
    }

    for (const tale of tales) {
      await ctx.replyWithAudio(tale.audio_url, {
        caption: `üìñ ${tale.title}\n\n${tale.text}`,
      });
    }
  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–∫–∞–∑–æ–∫:", err.message);
    ctx.reply("üö´ –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–∫–∞–∑–∫–∏. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.");
  }
});

bot.hears("üìò –†–∞—Å—Å–∫–∞–∑—ã", (ctx) => ctx.reply("üìñ –°–ø–∏—Å–æ–∫ —Ä–∞—Å—Å–∫–∞–∑–æ–≤‚Ä¶"));
bot.hears("‚è≥ –í—Ä–µ–º–µ–Ω–∞", (ctx) => ctx.reply("‚è≥ –í—Ä–µ–º–µ–Ω–∞ –∏—Å–ø–∞–Ω—Å–∫–æ–≥–æ —è–∑—ã–∫–∞‚Ä¶"));
bot.hears("‚ù§Ô∏è –ò–∑–±—Ä–∞–Ω–Ω–æ–µ", (ctx) => ctx.reply("‚ù§Ô∏è –¢–≤–æ–∏ –∏–∑–±—Ä–∞–Ω–Ω—ã–µ –∏—Å—Ç–æ—Ä–∏–∏‚Ä¶"));
bot.hears("üôè –ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å", (ctx) => {
  ctx.reply(`üôè –ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å –ø—Ä–æ–µ–∫—Ç\nüëâ https://boosty.to/yourpage`);
});
bot.hears("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", (ctx) =>
  ctx.reply("‚Ü©Ô∏è –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", mainMenuKeyboard)
);

module.exports = bot;
