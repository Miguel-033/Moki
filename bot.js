// const { Telegraf, Markup } = require("telegraf");
// const bot = new Telegraf(process.env.BOT_TOKEN);

// bot.use((ctx, next) => {
//   console.log("üì© Update:", ctx.update);
//   return next();
// });

// const levelKeyboard = Markup.keyboard([
//   ["üá™üá∏ –£—Ä–æ–≤–µ–Ω—å A1", "üá™üá∏ –£—Ä–æ–≤–µ–Ω—å A2"],
//   ["üá™üá∏ –£—Ä–æ–≤–µ–Ω—å B1", "üá™üá∏ –£—Ä–æ–≤–µ–Ω—å B2"],
// ]).resize();

// const mainMenuKeyboard = Markup.keyboard([
//   ["üè∞ –°–∫–∞–∑–∫–∏", "üìò –†–∞—Å—Å–∫–∞–∑—ã"],
//   ["‚è≥ –í—Ä–µ–º–µ–Ω–∞", "‚ù§Ô∏è –ò–∑–±—Ä–∞–Ω–Ω–æ–µ"],
//   ["üôè –ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å", "‚¨ÖÔ∏è –ù–∞–∑–∞–¥"],
// ]).resize();

// bot.start((ctx) => {
//   ctx.reply(
//     `üëã –ü—Ä–∏–≤–µ—Ç, ${ctx.from.first_name || "–¥—Ä—É–≥"}!

// ` +
//       `–Ø ‚Äî –±–æ—Ç *Moki* –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è –∏—Å–ø–∞–Ω—Å–∫–æ–≥–æ —á–µ—Ä–µ–∑ —Å–∫–∞–∑–∫–∏ –∏ —Ä–∞—Å—Å–∫–∞–∑—ã.
// ` +
//       `üìñ –ß–∏—Ç–∞–π –∏ —Å–ª—É—à–∞–π –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ —É—Ä–æ–≤–Ω—è–º A1‚ÄìB2.

// ` +
//       `üíñ –ü–æ–¥–¥–µ—Ä–∂–∏ –ø—Ä–æ–µ–∫—Ç –∫–æ–º–∞–Ω–¥–æ–π /donate

// ` +
//       `–í—ã–±–µ—Ä–∏ —Å–≤–æ–π —É—Ä–æ–≤–µ–Ω—å üëá`,
//     {
//       parse_mode: "Markdown",
//       ...levelKeyboard,
//     }
//   );
// });

// bot.hears(/–£—Ä–æ–≤–µ–Ω—å (A1|A2|B1|B2)/, (ctx) => {
//   const level = ctx.match[1];
//   ctx.reply(
//     `‚úÖ –£—Ä–æ–≤–µ–Ω—å ${level} –≤—ã–±—Ä–∞–Ω. –û—Ç–∫—Ä—ã–≤–∞—é –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é‚Ä¶`,
//     mainMenuKeyboard
//   );
// });

// bot.hears("üè∞ –°–∫–∞–∑–∫–∏", (ctx) => ctx.reply("üìö –°–ø–∏—Å–æ–∫ —Å–∫–∞–∑–æ–∫‚Ä¶"));
// bot.hears("üìò –†–∞—Å—Å–∫–∞–∑—ã", (ctx) => ctx.reply("üìñ –°–ø–∏—Å–æ–∫ —Ä–∞—Å—Å–∫–∞–∑–æ–≤‚Ä¶"));
// bot.hears("‚è≥ –í—Ä–µ–º–µ–Ω–∞", (ctx) => ctx.reply("‚è≥ –í—Ä–µ–º–µ–Ω–∞ –∏—Å–ø–∞–Ω—Å–∫–æ–≥–æ —è–∑—ã–∫–∞‚Ä¶"));
// bot.hears("‚ù§Ô∏è –ò–∑–±—Ä–∞–Ω–Ω–æ–µ", (ctx) => ctx.reply("‚ù§Ô∏è –¢–≤–æ–∏ –∏–∑–±—Ä–∞–Ω–Ω—ã–µ –∏—Å—Ç–æ—Ä–∏–∏‚Ä¶"));
// bot.hears("üôè –ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å", (ctx) => {
//   ctx.reply(`üôè –ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å –ø—Ä–æ–µ–∫—Ç
// üëâ https://boosty.to/yourpage`);
// });
// bot.hears("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", (ctx) =>
//   ctx.reply("‚Ü©Ô∏è –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", mainMenuKeyboard)
// );

// module.exports = bot;

const { Telegraf, Markup } = require("telegraf");
const fetch = require("node-fetch");
const bot = new Telegraf(process.env.BOT_TOKEN);

const userLevels = {}; // Telegram ID ‚Üí –≤—ã–±—Ä–∞–Ω–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å
const userSelections = {}; // Telegram ID ‚Üí –≤—ã–±—Ä–∞–Ω–Ω–∞—è —Å–∫–∞–∑–∫–∞

bot.start((ctx) => {
  ctx.reply(
    `üëã –ü—Ä–∏–≤–µ—Ç, ${ctx.from.first_name || "–¥—Ä—É–≥"}!\n\n` +
      `–Ø ‚Äî –±–æ—Ç *Moki* –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è –∏—Å–ø–∞–Ω—Å–∫–æ–≥–æ —á–µ—Ä–µ–∑ —Å–∫–∞–∑–∫–∏ –∏ —Ä–∞—Å—Å–∫–∞–∑—ã.\n` +
      `üìñ –ß–∏—Ç–∞–π –∏ —Å–ª—É—à–∞–π –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ —É—Ä–æ–≤–Ω—è–º A1‚ÄìB2.\n\n` +
      `–í—ã–±–µ—Ä–∏ —Å–≤–æ–π —É—Ä–æ–≤–µ–Ω—å üëá`,
    {
      parse_mode: "Markdown",
      ...Markup.keyboard([
        ["üá™üá∏ –£—Ä–æ–≤–µ–Ω—å A1", "üá™üá∏ –£—Ä–æ–≤–µ–Ω—å A2"],
        ["üá™üá∏ –£—Ä–æ–≤–µ–Ω—å B1", "üá™üá∏ –£—Ä–æ–≤–µ–Ω—å B2"],
      ]).resize(),
    }
  );
});

bot.hears(/–£—Ä–æ–≤–µ–Ω—å (A1|A2|B1|B2)/, (ctx) => {
  const level = ctx.match[1];
  userLevels[ctx.from.id] = level;
  ctx.reply(
    `‚úÖ –£—Ä–æ–≤–µ–Ω—å ${level} –≤—ã–±—Ä–∞–Ω.`,
    Markup.keyboard([
      ["üè∞ –°–∫–∞–∑–∫–∏", "üìò –†–∞—Å—Å–∫–∞–∑—ã"],
      ["‚è≥ –í—Ä–µ–º–µ–Ω–∞", "‚ù§Ô∏è –ò–∑–±—Ä–∞–Ω–Ω–æ–µ"],
      ["üôè –ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å", "‚¨ÖÔ∏è –ù–∞–∑–∞–¥"],
    ]).resize()
  );
});

bot.hears("üè∞ –°–∫–∞–∑–∫–∏", async (ctx) => {
  const level = userLevels[ctx.from.id];
  if (!level) return ctx.reply("üìå –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ —É—Ä–æ–≤–µ–Ω—å!");

  const apiUrl = `https://api.github.com/repos/miguel-033/moki-content/contents/content/${level}/—Å–∫–∞–∑–∫–∏`;

  try {
    const res = await fetch(apiUrl);
    const files = await res.json();

    const buttons = files.map((item) => [
      Markup.button.callback(item.name, `story_${item.name}`),
    ]);

    ctx.reply("üìö –í—ã–±–µ—Ä–∏ —Å–∫–∞–∑–∫—É:", Markup.inlineKeyboard(buttons));
  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Å–∫–∞–∑–æ–∫:", err);
    ctx.reply("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫.");
  }
});

bot.on("callback_query", async (ctx) => {
  const data = ctx.callbackQuery.data;
  const userId = ctx.from.id;
  const level = userLevels[userId];

  if (data.startsWith("story_")) {
    const storyId = data.replace("story_", "");
    userSelections[userId] = { storyId, level };

    return ctx.reply(
      "üìñ –ß—Ç–æ —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å?",
      Markup.inlineKeyboard([
        [Markup.button.callback("üìñ –ß–∏—Ç–∞—Ç—å", "read")],
        [Markup.button.callback("üîä –°–ª—É—à–∞—Ç—å", "listen")],
      ])
    );
  }

  if (data === "read" || data === "listen") {
    const { storyId, level } = userSelections[ctx.from.id] || {};
    if (!storyId || !level) return ctx.reply("‚ö†Ô∏è –ò—Å—Ç–æ—Ä–∏—è –Ω–µ –≤—ã–±—Ä–∞–Ω–∞.");

    const url = `https://raw.githubusercontent.com/miguel-033/moki-content/main/content/${level}/—Å–∫–∞–∑–∫–∏/${storyId}/data.json`;

    try {
      const res = await fetch(url);
      const story = await res.json();

      if (data === "read") {
        await ctx.reply(`üìñ *${story.title}*\n\n${story.text}`, {
          parse_mode: "Markdown",
        });
      } else {
        await ctx.replyWithAudio({ url: story.audio }, { title: story.title });
      }
    } catch (err) {
      console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏:", err);
      ctx.reply("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–∫–∞–∑–∫—É.");
    }
  }
});

module.exports = bot;
